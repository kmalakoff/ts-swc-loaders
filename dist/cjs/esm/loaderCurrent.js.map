{"version":3,"sources":["loaderCurrent.mjs"],"sourcesContent":["import { promises as fs } from 'node:fs';\nimport path from 'node:path';\nimport process from 'node:process';\nimport { pathToFileURL } from 'node:url';\nimport isBuiltinModule from 'is-builtin-module';\nimport { createMatcher, transformSync } from 'ts-swc-transform';\n\nimport extensions from '../extensions.mjs';\nimport Cache from '../lib/Cache.mjs';\nimport loadTSConfig from '../lib/loadTSConfig.mjs';\nimport extToFormat from './extToFormat.mjs';\nimport fileType from './fileType.mjs';\nimport toPath from './toPath.mjs';\n\nconst major = +process.versions.node.split('.')[0];\nconst importJSONKey = major >= 18 ? 'importAttributes' : 'importAssertions';\n\nconst cache = new Cache();\nconst config = loadTSConfig(process.cwd());\nconst match = createMatcher(config);\n\nconst moduleRegEx = /^[^.\\/]|^\\.[^.\\/]|^\\.\\.[^\\/]/;\nconst typeFileRegEx = /^[^.]+\\.d\\.(.*)$/;\nconst indexExtensions = extensions.map((x) => `index${x}`);\n\nexport async function resolve(specifier, context, next) {\n  if (isBuiltinModule(specifier)) return next(specifier, context);\n  const filePath = toPath(specifier, context);\n  const ext = path.extname(filePath);\n  let stats;\n  try {\n    stats = await fs.stat(filePath);\n  } catch (_err) {}\n\n  // filtered\n  if (!match(filePath)) {\n    const data = await next(specifier, context);\n    if (!data.format) data.format = 'commonjs';\n    if (path.isAbsolute(filePath) && !ext) data.format = 'commonjs'; // args bin is cjs in a module\n    return data;\n  }\n\n  // directory\n  // biome-ignore lint/complexity/useOptionalChain: <explanation>\n  if (specifier.endsWith('/') || (stats && stats.isDirectory())) {\n    const items = await fs.readdir(filePath);\n    const item = items.find((x) => indexExtensions.indexOf(x) >= 0);\n    if (item) return await resolve(`${specifier}${specifier.endsWith('/') ? '' : '/'}${item}`, context, next);\n  }\n  // look up the extension\n  else if ((!ext && !moduleRegEx.test(specifier)) || !stats) {\n    const fileName = path.basename(filePath).replace(/(\\.[^/.]+)+$/, '');\n    const items = await fs.readdir(path.dirname(filePath));\n    const found = items.find((x) => x.startsWith(fileName) && !typeFileRegEx.test(x) && extensions.indexOf(path.extname(x)) >= 0);\n    if (found) return await resolve(specifier + path.extname(found), context, next);\n  }\n\n  // use default resolve and infer from package type\n  const data = {\n    url: pathToFileURL(filePath).href,\n    format: extToFormat(ext),\n    shortCircuit: true,\n  };\n  if (!data.format) data.format = fileType(filePath);\n  return data;\n}\n\nexport async function load(url, context, next) {\n  if (isBuiltinModule(url)) return next(url, context);\n  if (url.endsWith('.json')) context[importJSONKey] = Object.assign(context[importJSONKey] || {}, { type: 'json' });\n\n  const data = await next(url, context);\n  const filePath = toPath(data.responseURL || url, context);\n  const ext = path.extname(filePath);\n  if (!data.source && data.type === 'module') data.source = await fs.readFile(filePath);\n\n  // filtered\n  if (!match(filePath)) return data;\n  if (typeFileRegEx.test(filePath))\n    return {\n      ...data,\n      format: 'module',\n      source: '',\n    };\n  if (extensions.indexOf(ext) < 0) return data;\n\n  // transform\n  if (!data.source) data.source = await fs.readFile(filePath);\n  const contents = data.source.toString();\n  const compiled = cache.getOrUpdate(cache.cachePath(filePath, config), contents, () => transformSync(contents, filePath, config));\n  return {\n    ...data,\n    source: compiled.code,\n    shortCircuit: true,\n  };\n}\n"],"names":["load","resolve","major","process","versions","node","split","importJSONKey","cache","Cache","config","loadTSConfig","cwd","match","createMatcher","moduleRegEx","typeFileRegEx","indexExtensions","extensions","map","x","specifier","context","next","filePath","ext","stats","_err","data","items","item","fileName","found","isBuiltinModule","toPath","path","extname","fs","stat","format","isAbsolute","endsWith","isDirectory","readdir","find","indexOf","test","basename","replace","dirname","startsWith","url","pathToFileURL","href","extToFormat","shortCircuit","fileType","contents","compiled","Object","assign","type","responseURL","source","readFile","toString","getOrUpdate","cachePath","transformSync","code"],"mappings":"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"}