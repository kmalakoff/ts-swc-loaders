{"version":3,"sources":["toPath.mjs"],"sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\nimport process from 'node:process';\nimport { fileURLToPath } from 'node:url';\nimport resolve from 'resolve';\n\nconst moduleRegEx = /^[^.\\/]|^\\.[^.\\/]|^\\.\\.[^\\/]/;\n\nexport default function toPath(x, context) {\n  if (x.startsWith('file://')) return fileURLToPath(x);\n  if (path.isAbsolute(x)) return x;\n  if (x[0] === '.') {\n    // biome-ignore lint/complexity/useOptionalChain: <explanation>\n    const parentPath = context && context.parentURL ? path.dirname(toPath(context.parentURL)) : process.cwd();\n    return path.resolve(parentPath, x);\n  }\n  if (moduleRegEx.test(x)) {\n    // biome-ignore lint/complexity/useOptionalChain: <explanation>\n    const parentPath = context && context.parentURL ? path.dirname(toPath(context.parentURL)) : process.cwd();\n    let pkg = null;\n    const main = resolve.sync(x, {\n      basedir: parentPath,\n      extensions: ['.js', '.json', '.node', '.mjs'],\n      packageFilter(json, dir) {\n        pkg = { json, dir };\n        return json;\n      },\n    });\n    if (!pkg || !pkg.json.module) return main; // no modules, use main\n    if (pkg.json.name === x) return path.resolve(pkg.dir, pkg.json.module); // the module\n\n    // a relative path. Only accept if it doesn't break the relative naming and it exists\n    const modulePath = path.resolve(pkg.dir, pkg.json.module);\n    const mainPath = path.resolve(pkg.dir, pkg.json.main);\n    const moduleResolved = path.resolve(modulePath, path.relative(mainPath, main));\n    return moduleResolved.indexOf(x.replace(pkg.json.name, '')) < 0 || !fs.existsSync(moduleResolved) ? main : moduleResolved;\n  }\n\n  return x;\n}\n"],"names":["toPath","moduleRegEx","x","context","startsWith","fileURLToPath","path","isAbsolute","parentPath","parentURL","dirname","process","cwd","resolve","test","pkg","main","sync","basedir","extensions","packageFilter","json","dir","module","name","modulePath","mainPath","moduleResolved","relative","indexOf","replace","fs","existsSync"],"mappings":";;;;+BAQA;;;eAAwBA;;;6DART;+DACE;kEACG;uBACU;8DACV;;;;;;AAEpB,IAAMC,cAAc;AAEL,SAASD,OAAOE,CAAC,EAAEC,OAAO;IACvC,IAAID,EAAEE,UAAU,CAAC,YAAY,OAAOC,IAAAA,sBAAa,EAACH;IAClD,IAAII,iBAAI,CAACC,UAAU,CAACL,IAAI,OAAOA;IAC/B,IAAIA,CAAC,CAAC,EAAE,KAAK,KAAK;QAChB,+DAA+D;QAC/D,IAAMM,aAAaL,WAAWA,QAAQM,SAAS,GAAGH,iBAAI,CAACI,OAAO,CAACV,OAAOG,QAAQM,SAAS,KAAKE,oBAAO,CAACC,GAAG;QACvG,OAAON,iBAAI,CAACO,OAAO,CAACL,YAAYN;IAClC;IACA,IAAID,YAAYa,IAAI,CAACZ,IAAI;QACvB,+DAA+D;QAC/D,IAAMM,cAAaL,WAAWA,QAAQM,SAAS,GAAGH,iBAAI,CAACI,OAAO,CAACV,OAAOG,QAAQM,SAAS,KAAKE,oBAAO,CAACC,GAAG;QACvG,IAAIG,MAAM;QACV,IAAMC,OAAOH,gBAAO,CAACI,IAAI,CAACf,GAAG;YAC3BgB,SAASV;YACTW,YAAY;gBAAC;gBAAO;gBAAS;gBAAS;aAAO;YAC7CC,eAAAA,SAAAA,cAAcC,IAAI,EAAEC,GAAG;gBACrBP,MAAM;oBAAEM,MAAAA;oBAAMC,KAAAA;gBAAI;gBAClB,OAAOD;YACT;QACF;QACA,IAAI,CAACN,OAAO,CAACA,IAAIM,IAAI,CAACE,MAAM,EAAE,OAAOP,MAAM,uBAAuB;QAClE,IAAID,IAAIM,IAAI,CAACG,IAAI,KAAKtB,GAAG,OAAOI,iBAAI,CAACO,OAAO,CAACE,IAAIO,GAAG,EAAEP,IAAIM,IAAI,CAACE,MAAM,GAAG,aAAa;QAErF,qFAAqF;QACrF,IAAME,aAAanB,iBAAI,CAACO,OAAO,CAACE,IAAIO,GAAG,EAAEP,IAAIM,IAAI,CAACE,MAAM;QACxD,IAAMG,WAAWpB,iBAAI,CAACO,OAAO,CAACE,IAAIO,GAAG,EAAEP,IAAIM,IAAI,CAACL,IAAI;QACpD,IAAMW,iBAAiBrB,iBAAI,CAACO,OAAO,CAACY,YAAYnB,iBAAI,CAACsB,QAAQ,CAACF,UAAUV;QACxE,OAAOW,eAAeE,OAAO,CAAC3B,EAAE4B,OAAO,CAACf,IAAIM,IAAI,CAACG,IAAI,EAAE,OAAO,KAAK,CAACO,eAAE,CAACC,UAAU,CAACL,kBAAkBX,OAAOW;IAC7G;IAEA,OAAOzB;AACT"}