{"version":3,"sources":["loaderCurrent.mjs"],"sourcesContent":["import { promises as fs } from 'node:fs';\nimport path from 'node:path';\nimport process from 'node:process';\nimport { pathToFileURL } from 'node:url';\nimport isBuiltinModule from 'is-builtin-module';\n\nimport Cache from '../Cache.mjs';\nimport createMatcher from '../createMatcher.mjs';\nimport extensions from '../extensions.mjs';\nimport loadTSConfig from '../loadTSConfig.mjs';\nimport transformSync from '../transformSync.cjs';\nimport extToFormat from './extToFormat.mjs';\nimport fileType from './fileType.mjs';\nimport toPath from './toPath.mjs';\n\nconst major = +process.versions.node.split('.')[0];\nconst importJSONKey = major >= 18 ? 'importAttributes' : 'importAssertions';\n\nconst cache = new Cache();\nconst config = loadTSConfig(path.resolve(process.cwd(), 'tsconfig.json'));\nconst match = createMatcher(config);\n\nconst moduleRegEx = /^[^.\\/]|^\\.[^.\\/]|^\\.\\.[^\\/]/;\nconst typeFileRegEx = /^[^.]+\\.d\\.(.*)$/;\nconst indexExtensions = extensions.map((x) => `index${x}`);\n\nexport async function resolve(specifier, context, next) {\n  if (isBuiltinModule(specifier)) return next(specifier, context);\n  const filePath = toPath(specifier, context);\n  const ext = path.extname(filePath);\n  let stats;\n  try {\n    stats = await fs.stat(filePath);\n  } catch (_err) {}\n\n  // filtered\n  if (!match(filePath)) {\n    const data = await next(specifier, context);\n    if (!data.format) data.format = 'commonjs';\n    if (path.isAbsolute(filePath) && !ext) data.format = 'commonjs'; // args bin is cjs in a module\n    return data;\n  }\n\n  // directory\n  // biome-ignore lint/complexity/useOptionalChain: <explanation>\n  if (specifier.endsWith('/') || (stats && stats.isDirectory())) {\n    const items = await fs.readdir(filePath);\n    const item = items.find((x) => indexExtensions.indexOf(x) >= 0);\n    if (item) return await resolve(`${specifier}${specifier.endsWith('/') ? '' : '/'}${item}`, context, next);\n  }\n  // look up the extension\n  else if ((!ext && !moduleRegEx.test(specifier)) || !stats) {\n    const fileName = path.basename(filePath).replace(/(\\.[^/.]+)+$/, '');\n    const items = await fs.readdir(path.dirname(filePath));\n    const found = items.find((x) => x.startsWith(fileName) && !typeFileRegEx.test(x) && extensions.indexOf(path.extname(x)) >= 0);\n    if (found) return await resolve(specifier + path.extname(found), context, next);\n  }\n\n  // use default resolve and infer from package type\n  const data = {\n    url: pathToFileURL(filePath).href,\n    format: extToFormat(ext),\n    shortCircuit: true,\n  };\n  if (!data.format) data.format = fileType(filePath);\n  return data;\n}\n\nexport async function load(url, context, next) {\n  if (isBuiltinModule(url)) return next(url, context);\n  if (url.endsWith('.json')) context[importJSONKey] = Object.assign(context[importJSONKey] || {}, { type: 'json' });\n\n  const data = await next(url, context);\n  const filePath = toPath(data.responseURL || url, context);\n  const ext = path.extname(filePath);\n  if (!data.source && data.type === 'module') data.source = await fs.readFile(filePath);\n\n  // filtered\n  if (!match(filePath)) return data;\n  if (typeFileRegEx.test(filePath))\n    return {\n      ...data,\n      format: 'module',\n      source: '',\n    };\n  if (extensions.indexOf(ext) < 0) return data;\n\n  // transform\n  if (!data.source) data.source = await fs.readFile(filePath);\n  const contents = data.source.toString();\n  const compiled = cache.getOrUpdate(cache.cachePath(filePath, config), contents, () => transformSync(contents, filePath, config));\n  return {\n    ...data,\n    source: compiled.code,\n    shortCircuit: true,\n  };\n}\n"],"names":["promises","fs","path","process","pathToFileURL","isBuiltinModule","Cache","createMatcher","extensions","loadTSConfig","transformSync","extToFormat","fileType","toPath","major","versions","node","split","importJSONKey","cache","config","resolve","cwd","match","moduleRegEx","typeFileRegEx","indexExtensions","map","x","specifier","context","next","filePath","ext","extname","stats","stat","_err","data","format","isAbsolute","endsWith","isDirectory","items","readdir","item","find","indexOf","test","fileName","basename","replace","dirname","found","startsWith","url","href","shortCircuit","load","Object","assign","type","responseURL","source","readFile","contents","toString","compiled","getOrUpdate","cachePath","code"],"mappings":"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"}