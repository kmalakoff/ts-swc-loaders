{"version":3,"sources":["toPath.mjs"],"sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\nimport process from 'node:process';\nimport { fileURLToPath } from 'node:url';\nimport resolve from 'resolve';\n\nconst moduleRegEx = /^[^.\\/]|^\\.[^.\\/]|^\\.\\.[^\\/]/;\n\nexport default function toPath(x, context) {\n  if (x.startsWith('file://')) return fileURLToPath(x);\n  if (path.isAbsolute(x)) return x;\n  if (x[0] === '.') {\n    // biome-ignore lint/complexity/useOptionalChain: <explanation>\n    const parentPath = context && context.parentURL ? path.dirname(toPath(context.parentURL)) : process.cwd();\n    return path.resolve(parentPath, x);\n  }\n  if (moduleRegEx.test(x)) {\n    // biome-ignore lint/complexity/useOptionalChain: <explanation>\n    const parentPath = context && context.parentURL ? path.dirname(toPath(context.parentURL)) : process.cwd();\n    let pkg = null;\n    const main = resolve.sync(x, {\n      basedir: parentPath,\n      extensions: ['.js', '.json', '.node', '.mjs'],\n      packageFilter(json, dir) {\n        pkg = { json, dir };\n        return json;\n      },\n    });\n    if (!pkg || !pkg.json.module) return main; // no modules, use main\n    if (pkg.json.name === x) return path.resolve(pkg.dir, pkg.json.module); // the module\n\n    // a relative path. Only accept if it doesn't break the relative naming and it exists\n    const modulePath = path.resolve(pkg.dir, pkg.json.module);\n    const mainPath = path.resolve(pkg.dir, pkg.json.main);\n    const moduleResolved = path.resolve(modulePath, path.relative(mainPath, main));\n    return moduleResolved.indexOf(x.replace(pkg.json.name, '')) < 0 || !fs.existsSync(moduleResolved) ? main : moduleResolved;\n  }\n\n  return x;\n}\n"],"names":["fs","path","process","fileURLToPath","resolve","moduleRegEx","toPath","x","context","startsWith","isAbsolute","parentPath","parentURL","dirname","cwd","test","pkg","main","sync","basedir","extensions","packageFilter","json","dir","module","name","modulePath","mainPath","moduleResolved","relative","indexOf","replace","existsSync"],"mappings":"AAAA,OAAOA,QAAQ,UAAU;AACzB,OAAOC,UAAU,YAAY;AAC7B,OAAOC,aAAa,eAAe;AACnC,SAASC,aAAa,QAAQ,WAAW;AACzC,OAAOC,aAAa,UAAU;AAE9B,MAAMC,cAAc;AAEpB,eAAe,SAASC,OAAOC,CAAC,EAAEC,OAAO;IACvC,IAAID,EAAEE,UAAU,CAAC,YAAY,OAAON,cAAcI;IAClD,IAAIN,KAAKS,UAAU,CAACH,IAAI,OAAOA;IAC/B,IAAIA,CAAC,CAAC,EAAE,KAAK,KAAK;QAChB,+DAA+D;QAC/D,MAAMI,aAAaH,WAAWA,QAAQI,SAAS,GAAGX,KAAKY,OAAO,CAACP,OAAOE,QAAQI,SAAS,KAAKV,QAAQY,GAAG;QACvG,OAAOb,KAAKG,OAAO,CAACO,YAAYJ;IAClC;IACA,IAAIF,YAAYU,IAAI,CAACR,IAAI;QACvB,+DAA+D;QAC/D,MAAMI,aAAaH,WAAWA,QAAQI,SAAS,GAAGX,KAAKY,OAAO,CAACP,OAAOE,QAAQI,SAAS,KAAKV,QAAQY,GAAG;QACvG,IAAIE,MAAM;QACV,MAAMC,OAAOb,QAAQc,IAAI,CAACX,GAAG;YAC3BY,SAASR;YACTS,YAAY;gBAAC;gBAAO;gBAAS;gBAAS;aAAO;YAC7CC,eAAcC,IAAI,EAAEC,GAAG;gBACrBP,MAAM;oBAAEM;oBAAMC;gBAAI;gBAClB,OAAOD;YACT;QACF;QACA,IAAI,CAACN,OAAO,CAACA,IAAIM,IAAI,CAACE,MAAM,EAAE,OAAOP,MAAM,uBAAuB;QAClE,IAAID,IAAIM,IAAI,CAACG,IAAI,KAAKlB,GAAG,OAAON,KAAKG,OAAO,CAACY,IAAIO,GAAG,EAAEP,IAAIM,IAAI,CAACE,MAAM,GAAG,aAAa;QAErF,qFAAqF;QACrF,MAAME,aAAazB,KAAKG,OAAO,CAACY,IAAIO,GAAG,EAAEP,IAAIM,IAAI,CAACE,MAAM;QACxD,MAAMG,WAAW1B,KAAKG,OAAO,CAACY,IAAIO,GAAG,EAAEP,IAAIM,IAAI,CAACL,IAAI;QACpD,MAAMW,iBAAiB3B,KAAKG,OAAO,CAACsB,YAAYzB,KAAK4B,QAAQ,CAACF,UAAUV;QACxE,OAAOW,eAAeE,OAAO,CAACvB,EAAEwB,OAAO,CAACf,IAAIM,IAAI,CAACG,IAAI,EAAE,OAAO,KAAK,CAACzB,GAAGgC,UAAU,CAACJ,kBAAkBX,OAAOW;IAC7G;IAEA,OAAOrB;AACT"}